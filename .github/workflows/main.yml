name: Update EC2 Instance and Create AMI

on:
  push:
    branches:
      - main

jobs:
  update-ec2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Update EC2 instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: eu-central-1
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@18.184.172.10 << EOF
            sudo apt update -y
            sudo su
            cd /var/www/html
            git status
            git pull origin main
            cp /home/ubuntu/.env /var/www/html/.env
          EOF

      - name: Create AMI of EC2 instance
        id: create_ami
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: eu-central-1
        run: |
          AMI_ID=$(aws ec2 create-image --instance-id i-0402afff6738c0219 --name "MyServer-$(date +%Y%m%d%H%M%S)" --no-reboot --query 'ImageId' --output text --region $AWS_DEFAULT_REGION)
          echo "::set-output name=AMI_ID::$AMI_ID"

      - name: Wait for AMI to become available
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: eu-central-1
        run: |
          aws ec2 wait image-available --image-ids ${{ steps.create_ami.outputs.AMI_ID }} --region $AWS_DEFAULT_REGION

      - name: Update launch template
        id: update_template
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: eu-central-1
        run: |
          NEW_VERSION=$(aws ec2 create-launch-template-version --launch-template-id lt-0c8e191ecaf53e039 --source-version 1 --version-description "Updated with new AMI" --launch-template-data "{\"ImageId\":\"${{ steps.create_ami.outputs.AMI_ID }}\", \"InstanceType\":\"t2.micro\"}" --query 'LaunchTemplateVersion.VersionNumber' --output text --region $AWS_DEFAULT_REGION)
          echo "::set-output name=NEW_VERSION::$NEW_VERSION"

      - name: Update Auto Scaling Group
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: eu-central-1
        run: |
          NEW_VERSION=${{ steps.update_template.outputs.NEW_VERSION }}
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name Testing-ASG --launch-template "LaunchTemplateId=lt-0c8e191ecaf53e039,Version=$NEW_VERSION" --region $AWS_DEFAULT_REGION
          aws autoscaling start-instance-refresh --auto-scaling-group-name Testing-ASG --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 50}' --region $AWS_DEFAULT_REGION
